#!/usr/bin/env python3
import rospy
import math
from std_msgs.msg import String
from std_msgs.msg import Float32
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist


class safe_drive(object):

    def __init__(self):
        #gets the type of the robot to assign the right topic for publisher
        self.robot_type = rospy.get_param("/scan_it/robot_type")
        self.pub_vel = rospy.Publisher('/cmd_vel' if self.robot_type == 'rto-1' else "/pioneer/cmd_vel", Twist, queue_size=10) 

        self.sub_vel = rospy.Subscriber('/input/cmd_vel', Twist, self.callback_vel)
        self.sub_scan = rospy.Subscriber('/scan', LaserScan, self.callback_sensor)

        self.scan = 0.0
        self.vel_Lin_x = 0.0
        self.vel = Twist()
        #setting the index 123 the x direction
        self.x_direction_index = 123
        #gets the minimum safe distance between the robot and the obstacles
        self.safe_distance = rospy.get_param("/scan_it/safe_distance", 0.2)

    def input(self, input):
        self.vel = input
        self.vel_Lin_x = input.linear.x

    def safe_drive_command(self, scan_data):
        # in case there is any velocity in x direction it checks the width to make sure that the robot can pass through
        if self.vel.linear.x != 0 :
            self.scan = min(scan_data.ranges)
            min_angle_index = scan_data.ranges.index(self.scan)
            #calculating the angle between the min distance and x direction line
            angle = abs(min_angle_index - self.x_direction_index) * scan_data.angle_increment
            #calculatung the width from and obstacle to the x direction line
            width = (self.scan) * math.sin(angle)
            print(width)
    
        if self.vel.linear.x != 0 and width > self.safe_distance: 
            self.vel.linear.x = self.vel_Lin_x
        else: 
            self.vel.linear.x = self.vel_Lin_x * math.tanh(self.scan - self.safe_distance)
        
        self.pub_vel.publish(self.vel)

    def callback_sensor(self, data):
        self.safe_drive_command(data)

    def callback_vel(self, data):
        self.input(data)

if __name__ == '__main__':
    rospy.init_node('safe_drive')
    safe_drive = safe_drive()
    rospy.spin()